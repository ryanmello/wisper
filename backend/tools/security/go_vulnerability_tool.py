import re
import time
import subprocess
from typing import Dict, List, Any, Optional
from pathlib import Path
from dataclasses import dataclass
from datetime import datetime
from tools.base_tool import BaseTool, ToolResult, ToolMetadata, ToolCapability, AnalysisContext
from utils.logging_config import get_logger

logger = get_logger(__name__)

@dataclass
class GoModule:
    name: str
    version: str
    indirect: bool = False
    
    def __str__(self):
        return f"{self.name}@{self.version}"

@dataclass
class Vulnerability:
    id: str
    summary: str
    details: str
    severity: str
    affected_module: str
    affected_versions: List[str]
    fixed_versions: List[str]
    cve_ids: List[str]
    references: List[str]
    
    @property
    def severity_score(self) -> int:
        severity_map = {
            "CRITICAL": 4,
            "HIGH": 3,
            "MEDIUM": 2,
            "MODERATE": 2,
            "LOW": 1,
            "UNKNOWN": 0
        }
        return severity_map.get(self.severity.upper(), 0)


class GoVulnerabilityTool(BaseTool):
    """ Tool for scanning Go projects for known security vulnerabilities. """
    
    def __init__(self):
        super().__init__()
    
    def validate_context(self, context: AnalysisContext) -> tuple[bool, List[str]]:
        pass

    async def get_govulncheck_output(self, repository_path: str) -> Optional[str]:
        """Get raw govulncheck output for AI processing."""
        try:
            result = subprocess.run(
                ["govulncheck", "-version"],
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=10
            )
            
            if result.returncode != 0:
                logger.info("govulncheck not available")
                return None
            
            result = subprocess.run(
                ["govulncheck", "./..."],
                cwd=repository_path,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=60
            )
            
            if result.returncode == 0:
                logger.info("govulncheck completed successfully")
                return result.stdout
            else:
                if result.stdout:
                    logger.info("govulncheck found vulnerabilities")
                    return result.stdout
                else:
                    logger.warning(f"govulncheck failed: {result.stderr}")
                    return None
                
        except subprocess.TimeoutExpired:
            logger.warning("govulncheck timed out")
            return None
        except FileNotFoundError:
            logger.info("govulncheck not installed")
            return None
        except UnicodeDecodeError as e:
            logger.warning(f"Unicode decode error in govulncheck output: {e}")
            return None
        except Exception as e:
            logger.warning(f"Failed to run govulncheck: {e}")
            return None